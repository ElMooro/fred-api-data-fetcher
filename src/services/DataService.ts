import {DataPoint, Statistics} from "../types";export class DataService {static async fetchData(seriesId: string,frequency: string,startDate: string,endDate: string): Promise<DataPoint[]> {try {await new Promise(resolve => setTimeout(resolve, 800));return [{date: "2023-01-01", value: 105.2},{date: "2023-02-01", value: 107.5},{date: "2023-03-01", value: 106.8},].filter(point => {const date = new Date(point.date);return date >= new Date(startDate) && date <= new Date(endDate);});} catch (error) {console.error("Error fetching data:", error);throw new Error("Failed to fetch data");}}static transformData(data: DataPoint[], transformationType: string): DataPoint[] {try {if (!data || data.length === 0 || transformationType === "raw") {return [...data];}switch (transformationType) {case "mom_pct":return data.map((item, index) => {if (index === 0) return { ...item, value: 0 };const prevValue = data[index - 1].value;return {...item,value: prevValue ? (item.value - prevValue) / prevValue * 100 : 0};});default:return [...data];}} catch (error) {console.error("Error transforming data:", error);return [...data];}}static calculateStatistics(data: DataPoint[]): Statistics {try {if (!data || data.length === 0) {return {min: 0,max: 0,mean: 0,median: 0,stdDev: 0,count: 0};}const values = data.map(d => d.value).filter(v => v !== null && !isNaN(v));if (values.length === 0) {return {min: 0,max: 0,mean: 0,median: 0,stdDev: 0,count: 0};}const min = Math.min(...values);const max = Math.max(...values);const sum = values.reduce((acc, val) => acc + val, 0);const mean = sum / values.length;const sortedValues = [...values].sort((a, b) => a - b);const median = values.length % 2 === 0? (sortedValues[values.length / 2 - 1] + sortedValues[values.length / 2]) / 2: sortedValues[Math.floor(values.length / 2)];const squareDiffs = values.map(value => {const diff = value - mean;return diff * diff;});const avgSquareDiff = squareDiffs.reduce((acc, val) => acc + val, 0) / values.length;const stdDev = Math.sqrt(avgSquareDiff);return {min,max,mean,median,stdDev,count: values.length};} catch (error) {console.error("Error calculating statistics:", error);return {min: 0,max: 0,mean: 0,median: 0,stdDev: 0,count: 0,error: error instanceof Error ? error.message : "Unknown error"};}};}
